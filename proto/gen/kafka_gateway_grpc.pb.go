// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: kafka_gateway.proto

package gatewayv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KafkaGatewayServiceClient is the client API for KafkaGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KafkaGatewayServiceClient interface {
	// Health check endpoint
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Publish message to Kafka topic
	PublishMessage(ctx context.Context, in *PublishMessageRequest, opts ...grpc.CallOption) (*PublishMessageResponse, error)
	// List all Kafka topics
	ListTopics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListTopicsResponse, error)
	// Get topic partitions
	GetTopicPartitions(ctx context.Context, in *GetTopicPartitionsRequest, opts ...grpc.CallOption) (*GetTopicPartitionsResponse, error)
	// Create a new Kafka topic
	CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error)
}

type kafkaGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKafkaGatewayServiceClient(cc grpc.ClientConnInterface) KafkaGatewayServiceClient {
	return &kafkaGatewayServiceClient{cc}
}

func (c *kafkaGatewayServiceClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/kafka.gateway.v1.KafkaGatewayService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaGatewayServiceClient) PublishMessage(ctx context.Context, in *PublishMessageRequest, opts ...grpc.CallOption) (*PublishMessageResponse, error) {
	out := new(PublishMessageResponse)
	err := c.cc.Invoke(ctx, "/kafka.gateway.v1.KafkaGatewayService/PublishMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaGatewayServiceClient) ListTopics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListTopicsResponse, error) {
	out := new(ListTopicsResponse)
	err := c.cc.Invoke(ctx, "/kafka.gateway.v1.KafkaGatewayService/ListTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaGatewayServiceClient) GetTopicPartitions(ctx context.Context, in *GetTopicPartitionsRequest, opts ...grpc.CallOption) (*GetTopicPartitionsResponse, error) {
	out := new(GetTopicPartitionsResponse)
	err := c.cc.Invoke(ctx, "/kafka.gateway.v1.KafkaGatewayService/GetTopicPartitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaGatewayServiceClient) CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error) {
	out := new(CreateTopicResponse)
	err := c.cc.Invoke(ctx, "/kafka.gateway.v1.KafkaGatewayService/CreateTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KafkaGatewayServiceServer is the server API for KafkaGatewayService service.
// All implementations must embed UnimplementedKafkaGatewayServiceServer
// for forward compatibility
type KafkaGatewayServiceServer interface {
	// Health check endpoint
	HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error)
	// Publish message to Kafka topic
	PublishMessage(context.Context, *PublishMessageRequest) (*PublishMessageResponse, error)
	// List all Kafka topics
	ListTopics(context.Context, *emptypb.Empty) (*ListTopicsResponse, error)
	// Get topic partitions
	GetTopicPartitions(context.Context, *GetTopicPartitionsRequest) (*GetTopicPartitionsResponse, error)
	// Create a new Kafka topic
	CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicResponse, error)
	mustEmbedUnimplementedKafkaGatewayServiceServer()
}

// UnimplementedKafkaGatewayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKafkaGatewayServiceServer struct {
}

func (UnimplementedKafkaGatewayServiceServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedKafkaGatewayServiceServer) PublishMessage(context.Context, *PublishMessageRequest) (*PublishMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishMessage not implemented")
}
func (UnimplementedKafkaGatewayServiceServer) ListTopics(context.Context, *emptypb.Empty) (*ListTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopics not implemented")
}
func (UnimplementedKafkaGatewayServiceServer) GetTopicPartitions(context.Context, *GetTopicPartitionsRequest) (*GetTopicPartitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicPartitions not implemented")
}
func (UnimplementedKafkaGatewayServiceServer) CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopic not implemented")
}
func (UnimplementedKafkaGatewayServiceServer) mustEmbedUnimplementedKafkaGatewayServiceServer() {}

// UnsafeKafkaGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KafkaGatewayServiceServer will
// result in compilation errors.
type UnsafeKafkaGatewayServiceServer interface {
	mustEmbedUnimplementedKafkaGatewayServiceServer()
}

func RegisterKafkaGatewayServiceServer(s grpc.ServiceRegistrar, srv KafkaGatewayServiceServer) {
	s.RegisterService(&KafkaGatewayService_ServiceDesc, srv)
}

func _KafkaGatewayService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaGatewayServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.gateway.v1.KafkaGatewayService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaGatewayServiceServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaGatewayService_PublishMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaGatewayServiceServer).PublishMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.gateway.v1.KafkaGatewayService/PublishMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaGatewayServiceServer).PublishMessage(ctx, req.(*PublishMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaGatewayService_ListTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaGatewayServiceServer).ListTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.gateway.v1.KafkaGatewayService/ListTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaGatewayServiceServer).ListTopics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaGatewayService_GetTopicPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicPartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaGatewayServiceServer).GetTopicPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.gateway.v1.KafkaGatewayService/GetTopicPartitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaGatewayServiceServer).GetTopicPartitions(ctx, req.(*GetTopicPartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaGatewayService_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaGatewayServiceServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.gateway.v1.KafkaGatewayService/CreateTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaGatewayServiceServer).CreateTopic(ctx, req.(*CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KafkaGatewayService_ServiceDesc is the grpc.ServiceDesc for KafkaGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KafkaGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kafka.gateway.v1.KafkaGatewayService",
	HandlerType: (*KafkaGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _KafkaGatewayService_HealthCheck_Handler,
		},
		{
			MethodName: "PublishMessage",
			Handler:    _KafkaGatewayService_PublishMessage_Handler,
		},
		{
			MethodName: "ListTopics",
			Handler:    _KafkaGatewayService_ListTopics_Handler,
		},
		{
			MethodName: "GetTopicPartitions",
			Handler:    _KafkaGatewayService_GetTopicPartitions_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _KafkaGatewayService_CreateTopic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kafka_gateway.proto",
}
